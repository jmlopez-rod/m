import argparse
from typing import Any, TypeVar


class CmdModule:
    """Interface for command modules."""

    meta: dict[str, str]

    # @deprecated - should use command decorator instead
    @staticmethod
    def add_arguments(_p: argparse.ArgumentParser) -> None:  # noqa: WPS602
        """Allow for more arguments to be added."""

    # @deprecated - should use command decorator instead
    @staticmethod
    def add_parser(  # noqa: WPS602
        _subparser: Any,
        _raw: Any,
    ) -> None:
        """Entry function to create a subparser."""

    @staticmethod
    def run(  # noqa: WPS602
        _arg: argparse.Namespace | None,
        _parser: argparse._SubParsersAction | None = None,  # noqa: WPS437
    ) -> int:
        """Entry point for the cli.

        Call a library function and return 0 if successful or non-zero if there
        is a failure. This type of function will be generated by using the
        `command` decorator.

        Args:
            _arg: An argparse Namespace instance.
            _parser: An argparse subparser instance.

        Returns:
            The exit code for the command.
        """
        # This method is only defined as an interface. It will never be
        # called, thus we are excluding this line from coverage.
        return 0  # pragma: no cover


CmdMap = dict[str, CmdModule]
NestedCmdMap = dict[str, CmdModule | CmdMap]
MISSING = TypeVar('MISSING')
